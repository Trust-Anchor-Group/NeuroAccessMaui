using System.Collections.Concurrent;
using System.Threading.Tasks;
using Waher.Runtime.Inventory;

namespace NeuroAccessMaui.Services.Intents
{
	/// <summary>
	/// Represents an application intent containing an action, optional data, and an optional payload.
	/// <para>
	/// An "intent" is a structured message that indicates that a particular event or action has occurred and that the application
	/// should respond accordingly. For example, an intent may instruct the application to open a URL (e.g., deep linking) or notify the app
	/// that an NFC tag has been detected.
	/// </para>
	/// <para>
	/// This class is used to pass intent data from platform‑specific components (such as Android’s MainActivity or iOS’s AppDelegate)
	/// to the shared business logic that handles these events in a cross‑platform manner.
	/// </para>
	/// </summary>
	public class AppIntent
	{
		/// <summary>
		/// Gets or sets the action associated with the intent.
		/// </summary>
		public string Action { get; set; } = string.Empty;

		/// <summary>
		/// Gets or sets the optional string data associated with the intent.
		/// This might be used for deep links.
		/// </summary>
		public string? Data { get; set; }

		/// <summary>
		/// Gets or sets an optional payload containing additional information (e.g. a cross‑platform NFC tag).
		/// </summary>
		public object? Payload { get; set; }
	}

	/// <summary>
	/// Defines the contract for a service that handles application intents.
	/// <para>
	/// The intent service is responsible for receiving, queuing, and processing intents generated by platform-specific components.
	/// It decouples event detection from the actual processing logic, ensuring that events are handled once the application is fully initialized.
	/// </para>
	/// <para>
	/// Platform-specific code (for example, Android's MainActivity or iOS's AppDelegate) should call <see cref="QueueIntent(AppIntent)"/>
	/// when an event occurs. Later, when the app is ready, the queued intents are processed asynchronously by calling
	/// <see cref="ProcessQueuedIntentsAsync()"/> or <see cref="ProcessIntentAsync(AppIntent)"/>.
	/// </para>
	/// </summary>
	[DefaultImplementation(typeof(IntentService))]
	public interface IIntentService
	{
		/// <summary>
		/// Queues an intent for later processing.
		/// </summary>
		/// <param name="intent">The intent to be queued.</param>
		void QueueIntent(AppIntent intent);

		/// <summary>
		/// Processes all queued intents asynchronously.
		/// This method should be called once the application is fully initialized.
		/// </summary>
		/// <returns>A <see cref="Task"/> representing the asynchronous operation.</returns>
		Task ProcessQueuedIntentsAsync();

		/// <summary>
		/// Processes a single intent asynchronously.
		/// </summary>
		/// <param name="intent">The intent to process.</param>
		/// <returns>A task representing the asynchronous operation.</returns>
		Task ProcessIntentAsync(AppIntent intent);

	}
}
